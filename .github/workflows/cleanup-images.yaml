name: "Cleanup old untagged images"

# This workflow removes untagged container images that are older than 3 months
# from the GitHub Container Registry (ghcr.io). This helps reduce storage costs
# and keeps the package registry clean.
#
# The workflow:
# - Runs monthly on the 15th at 2 AM UTC
# - Can be triggered manually with a dry-run option
# - Only deletes untagged images (preserves all tagged versions)
# - Has a safety limit of 50 deletions per run
# - Defaults to dry-run mode for safety

on:
  schedule:
    # Run on the 15th of each month at 2 AM UTC
    - cron: "0 2 15 * *"
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (only list images, do not delete)'
        required: false
        default: true
        type: boolean

permissions:
  packages: write
  contents: read

jobs:
  cleanup:
    name: Delete old untagged images
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: |
          # Calculate date 3 months ago (90 days)
          cutoff_date=$(date -d '90 days ago' -u +%Y-%m-%dT%H:%M:%SZ)
          echo "cutoff_date=${cutoff_date}" >> $GITHUB_OUTPUT
          echo "Cutoff date: ${cutoff_date}"

      - name: List and delete old untagged images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: ${{ inputs.dry_run || 'true' }}
          CUTOFF_DATE: ${{ steps.date.outputs.cutoff_date }}
          MAX_DELETE_COUNT: 50  # Safety limit
        run: |
          set -e
          
          echo "=== Container Image Cleanup ==="
          echo "Repository: ${{ github.repository }}"
          echo "Package: brave"
          echo "Cutoff date: ${CUTOFF_DATE}"
          echo "Dry run: ${DRY_RUN}"
          echo "Maximum deletion limit: ${MAX_DELETE_COUNT}"
          echo ""
          
          # Get package versions
          echo "Fetching package versions..."
          response=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/${{ github.repository_owner }}/packages/container/brave/versions?per_page=100")
          
          # Check for API errors
          if echo "$response" | jq -e '.message' > /dev/null 2>&1; then
            echo "Error from GitHub API:"
            echo "$response" | jq -r '.message'
            exit 1
          fi
          
          # Ensure we got a valid response
          if ! echo "$response" | jq -e '. | type == "array"' > /dev/null 2>&1; then
            echo "Invalid response from GitHub API:"
            echo "$response" | head -n 10
            exit 1
          fi
          
          # Filter untagged versions older than cutoff date
          old_versions=$(echo "$response" | jq -r --arg cutoff "$CUTOFF_DATE" '
            .[] | 
            select(.metadata.container.tags | length == 0) |
            select(.updated_at < $cutoff) |
            .id'
          )
          
          if [ -z "$old_versions" ]; then
            echo "No old untagged images found."
            exit 0
          fi
          
          echo "Found old untagged images:"
          count=0
          for version_id in $old_versions; do
            version_info=$(echo "$response" | jq -r --arg id "$version_id" '.[] | select(.id == ($id | tonumber))')
            updated_at=$(echo "$version_info" | jq -r '.updated_at')
            echo "  - Version ID: $version_id (updated: $updated_at)"
            count=$((count + 1))
          done
          
          echo ""
          echo "Total old untagged images: $count"
          
          # Safety check
          if [ "$count" -gt "$MAX_DELETE_COUNT" ]; then
            echo "ERROR: Found $count images to delete, which exceeds safety limit of $MAX_DELETE_COUNT"
            echo "This might indicate an issue. Please review manually."
            exit 1
          fi
          
          if [ "$DRY_RUN" = "true" ]; then
            echo "DRY RUN: Would delete $count old untagged images"
            echo ""
            echo "To actually delete these images, run this workflow with dry_run=false"
          else
            echo "Deleting old untagged images..."
            deleted=0
            failed=0
            
            for version_id in $old_versions; do
              echo "Deleting version ID: $version_id"
              delete_response=$(curl -s -w "%{http_code}" -o /tmp/delete_response.json \
                -X DELETE \
                -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/brave/versions/$version_id")
              
              if [ "$delete_response" = "204" ]; then
                echo "  ✓ Successfully deleted version $version_id"
                deleted=$((deleted + 1))
              else
                echo "  ✗ Failed to delete version $version_id (HTTP $delete_response)"
                if [ -f /tmp/delete_response.json ]; then
                  cat /tmp/delete_response.json | jq -r '.message // .' 2>/dev/null || cat /tmp/delete_response.json
                fi
                failed=$((failed + 1))
              fi
            done
            
            echo ""
            echo "Cleanup completed:"
            echo "  Successfully deleted: $deleted"
            echo "  Failed to delete: $failed"
            echo "  Total processed: $count"
            
            if [ "$failed" -gt 0 ]; then
              echo "Some deletions failed. Check the logs above for details."
              exit 1
            fi
          fi
